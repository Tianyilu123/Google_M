class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] end) {
        int row = maze.length;
        if(row==0) return 0;
        int col = maze[0].length;
        int[][] dist = new int[row][col];
        int[][] dir = {{-1,0},{0,-1},{1,0},{0,1}};
        for(int[] drow:dist)
            Arrays.fill(drow,Integer.MAX_VALUE);
        dist[start[0]][start[1]] = 0;
        Queue<int[]> q = new LinkedList<>();
        q.offer(start);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                int[] p = q.poll();
                for(int[] d:dir){
                    int step = 0;
                    int x = p[0], y = p[1];
                    int nx = x + d[0], ny = y + d[1];
                    while(nx>=0 && nx<row && ny>=0 && ny<col && maze[nx][ny]!=1){
                        x = nx; y = ny;
                        step++;
                        nx = x + d[0]; ny = y + d[1];
                    }   
                    if(dist[p[0]][p[1]]+step<dist[x][y]){
                        dist[x][y] = dist[p[0]][p[1]]+step;
                        q.offer(new int[]{x,y});
                    }   
                }
                
            }
        }
        return dist[end[0]][end[1]]==Integer.MAX_VALUE? -1:dist[end[0]][end[1]];
    }
}
