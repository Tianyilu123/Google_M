class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if(candidates == null || candidates.length == 0) return res;
        helper(res, new ArrayList<Integer>(), candidates, 0, target, 0);
        return res;
    }
    
    private void helper(List<List<Integer>> res, List<Integer> tmp, int[] nums, 
                                                        int idx, int target, int cur) {
        
        if(idx == nums.length || cur > target)
            return;
        
        if(cur == target) {
            res.add(new ArrayList<>(tmp));
            return;
        }
        
        for(int i=idx; i<nums.length; i++) {
            tmp.add(nums[i]);
            helper(res, tmp, nums, i, target, cur+nums[i]);
            tmp.remove(tmp.size()-1);
        }
    }
}
