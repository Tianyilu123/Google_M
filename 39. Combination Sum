class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if(candidates == null || candidates.length == 0) return res;
        ArrayList<Integer> list = new ArrayList<>();
        helper(res, list, candidates, 0, target, 0);
        return res;
    }
    
    private void helper(List<List<Integer>> res, ArrayList<Integer> list, int[] candi, 
                                                    int idx, int target, int curSum) {
        if(idx == candi.length || curSum > target)
            return;
        
        if(curSum == target) {
            res.add(new ArrayList<>(list));
            return;
        }
        
        for(int i=idx; i<candi.length; i++) {
            list.add(candi[i]);
            helper(res, list, candi, i, target, curSum+candi[i]);
            list.remove(list.size()-1);
        }
    }
}
