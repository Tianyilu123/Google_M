// method 1:
class Solution {
    public boolean isNStraightHand(int[] hand, int W) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int i : hand){
            minHeap.add(i);
        }
        while(minHeap.size() != 0) {
            int start = minHeap.poll();
            for(int j = 1; j < W; j++){
                if(minHeap.remove(start + j)) {
                    continue;
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
}

// method 2:
class Solution {
     public boolean isNStraightHand(int[] hand, int W) {
        Map<Integer, Integer> map = new TreeMap<>();
        for(int i : hand) 
            map.put(i, map.getOrDefault(i, 0)+1);
        
        for(int i : map.keySet()) {
            int count = map.get(i);
            if(count == 0) continue;
            for(int j=i; j<i+W; j++) {
               Integer c = map.get(j);
                if(c == null || c < count) return false;
                map.put(j, c-count);
            }
        }
        return true;   
    }
    
    
  // Time Complexity: O(mwlogm). TreeMap, get, put, remove all takes O(logm). m = hand.length.

// Space: O(m).
}
