// method 1: DP:

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s == null || s.length() == 0 || wordDict == null || wordDict.size() == 0)
            return false;
        HashSet<String> set = new HashSet<>();
        int len = s.length();
        for(String word : wordDict) {
            set.add(word);
        }
        
        boolean[] dp = new boolean[len + 1];
        dp[0] = true;
        
        for(int i=1; i<=len; i++) {
            for(int j=0; j<i; j++) {
                if(dp[j] && set.contains(s.substring(j,i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[len];
    }
}

// time: O(n^2)
// space: O(n)


// method 2: Prunning:

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s == null || s.length() == 0 || wordDict == null || wordDict.size() == 0)
            return false;
        HashSet<String> set = new HashSet<>();
        int len = s.length();
        for(String word : wordDict) {
            set.add(word);
        }
        
        Boolean[] mem = new Boolean[len+1];
        return dfs(s, 0, set, mem);
    }
    
    private boolean dfs(String s, int idx, HashSet<String> dict, Boolean[] mem) {
        int len = s.length();
        if(idx == len)
            return true;
        
        if(mem[idx] != null)
            return mem[idx];
        
        for(int i=idx; i<len; i++) {
            String str = s.substring(idx, i+1);
            if(dict.contains(str)) {
                if(dfs(s, i+1, dict, mem)) {
                    mem[idx] = true;
                    return true;
                }
            }
        }
        mem[idx] = false;
        return mem[idx];
    }
}

// time: O(n^2)
// space: O(n);



// method 3: DFS(no pruning) (time limited)

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s == null || s.length() == 0) return false;
        if(wordDict == null || wordDict.size() == 0) return false;
        
        HashSet<String> wordSet = new HashSet<>();
        for(String word : wordDict) {
            wordSet.add(word);
        }
        
        return helper(s, wordSet, 0);
    }
    
    private boolean helper(String str, HashSet<String> set, int idx) {
        if(idx == str.length()) return true;
        
        for(int i=idx; i<str.length(); i++) {
            String sub = str.substring(idx, i+1);
            if(set.contains(sub)) {
                if (helper(str, set, i+1))
                    return true;
            }
        }
        return false;
    }
}
