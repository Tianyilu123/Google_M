class SnakeGame {

    HashSet<Integer> set;
    Deque<Integer> deque;
    int score;
    int foodIdx;
    int width;
    int height;
    int[][] food;
    
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        set = new HashSet<>();
        deque = new LinkedList<>();
        score = 0;
        foodIdx = 0;
        set.add(0);
        deque.offerLast(0);
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        if(score == -1) return -1;
        int rowHead = deque.peekFirst() / width;
        int colHead = deque.peekFirst() % width;
        
        switch(direction) {
            case "U": rowHead--; break;
            case "D": rowHead++; break;
            case "L": colHead--; break;
            default:  colHead++;
        }
        int head = rowHead*width + colHead;
        set.remove(deque.peekLast());
        if(rowHead < 0 || rowHead == height || colHead<0 || colHead == width 
                                                        || set.contains(head)){
            return score = -1;
        }
        set.add(head);
        deque.offerFirst(head);
        // eat someting;
        if(foodIdx < food.length && rowHead == food[foodIdx][0] && colHead == food[foodIdx][1]) {
            foodIdx++;
            ++score;
            set.add(deque.peekLast());
            return score;
        }
        // not eat
        deque.pollLast();
        return score;
    }
}
