class Solution {
    public boolean exist(char[][] board, String word) {
        if(board ==null || board.length == 0) return false;
        if(word == null || word.length() == 0) return false;
        int row = board.length;
        int col = board[0].length;
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(dfs(board, i, j, word, 0, new boolean[row][col]))
                    return true;
            }
        }
        return false;
    }
    
    private boolean dfs (char[][] board, int i, int j, String word, int idx, boolean[][] visited) {
        if(idx == word.length())
            return true;
        int row = board.length;
        int col = board[0].length;
        boolean res = false;
        
        if(i>=0 && i<row && j>=0 && j<col && board[i][j] == word.charAt(idx) && !visited[i][j]) {
            visited[i][j] = true;
            res =   dfs(board, i+1, j, word, idx+1, visited) || 
                    dfs(board, i-1, j, word, idx+1, visited) ||
                    dfs(board, i, j+1, word, idx+1, visited) ||
                    dfs(board, i, j-1, word, idx+1, visited) ;
            visited[i][j] = false;
        }
        
        return res;
    }
}
