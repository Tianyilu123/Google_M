// method 1: DFS
class Solution {
    private int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}
                            ,{-1,-1},{-1,1},{1,-1},{1,1}};
    
    public char[][] updateBoard(char[][] board, int[] click) {
        int row = click[0], col = click[1];
        int m = board.length, n = board[0].length;
        if(board[row][col] == 'M' || board[row][col] == 'X') {
            board[row][col] = 'X';
            return board;
        }
        
        int num = 0;
        for(int[] dir : dirs) {
            int newRow = dir[0] + row;
            int newCol = dir[1] + col;
            
            if(newRow >= 0 && newCol >= 0 && newRow < m && newCol < n &&
              board[newRow][newCol] == 'M') {
                num++;
            }
        }
        if(num > 0) {
            board[row][col] = (char)(num+'0');
            return board;
        }
        
        board[row][col] = 'B';
        for(int[] dir : dirs) {
            int newRow = dir[0] + row;
            int newCol = dir[1] + col;
            
            if(newRow >= 0 && newCol >= 0 && newRow < m && newCol < n &&
              board[newRow][newCol] == 'E') {
                updateBoard(board, new int[]{newRow, newCol});
            }
        }
        return board;
    }
}


// method 2: BFS
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int m = board.length, n = board[0].length;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(click);
        
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int row = cell[0], col = cell[1];
            
            if (board[row][col] == 'M') { // Mine
                board[row][col] = 'X';
            }
            else { // Empty
                // Get number of mines first.
                int count = 0;
                for (int i = -1; i < 2; i++) {
                    for (int j = -1; j < 2; j++) {
                        if (i == 0 && j == 0) continue;
                        int r = row + i, c = col + j;
                        if (r < 0 || r >= m || c < 0 || c < 0 || c >= n) continue;
                        if (board[r][c] == 'M' || board[r][c] == 'X') count++;
                    }
                }
                
                if (count > 0) { // If it is not a 'B', stop further BFS.
                    board[row][col] = (char)(count + '0');
                }
                else { // Continue BFS to adjacent cells.
                    board[row][col] = 'B';
                    for (int i = -1; i < 2; i++) {
                        for (int j = -1; j < 2; j++) {
                            if (i == 0 && j == 0) continue;
                            int r = row + i, c = col + j;
                            if (r < 0 || r >= m || c < 0 || c < 0 || c >= n) continue;
                            if (board[r][c] == 'E') {
                                queue.add(new int[] {r, c});
                                board[r][c] = 'B'; // Avoid to be added again.
                            }
                        }
                    }
                }
            }
        }
        
        return board;
    }
}
