// method 1:
class Solution {
    public int minKnightMoves(int x, int y) {
        // Symmetry for axes
        x = Math.abs(x);
        y = Math.abs(y);
        // Symmetry for diagonal
        if (x < y) {
            int temp = x;
            x = y;
            y = temp;
        }
        if (x == 1 && y == 0) {
            return 3;
        }
        if (x == 2 && y == 2) {
            return 4;
        }
        int delta = x - y;
        if (y > delta) {
            return (int) (delta - 2 * Math.floor((float) (delta - y) / 3));
        } else {
            return (int) (delta - 2 * Math.floor((delta - y) / 4));
        }
    }
}


// method 2:
class Solution {
    int [][] dirs = new int[][]{{-1, -2}, {-1, 2}, {1, -2}, {1, 2}, {-2, -1}, {-2, 1}, {2, -1}, {2, 1}};
    
    public int minKnightMoves(int x, int y) {
        x = Math.abs(x);
        y = Math.abs(y);
        
        HashSet<String> visited = new HashSet<>();
        LinkedList<int []> que = new LinkedList<>();
        que.add(new int[]{0, 0});
        visited.add("0,0");
        
        int step = 0;
        while(!que.isEmpty()){
            int size = que.size();
            while(size-->0){
                int [] cur = que.poll();
                if(cur[0] == x && cur[1] == y){
                    return step;
                }

                for(int [] dir : dirs){
                    int i = cur[0] + dir[0];
                    int j = cur[1] + dir[1];
                    if(!visited.contains(i+","+j) && i>=-1 && j>=-1){
                        que.add(new int[]{i, j});
                        visited.add(i+","+j);
                    }
                }
            }
            
            step++;
        }
        
        return -1;
    }
}
