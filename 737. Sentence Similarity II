// method 1:
class Solution {
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        if (words1.length != words2.length)
            return false;
        
        DSU dsu = new DSU(pairs);
        for (List<String> pair : pairs) {
            dsu.union(pair.get(0), pair.get(1));
        }
        
        for (int i = 0; i < words1.length; i++) {
            if (!dsu.contains(words1[i]) && !dsu.contains(words2[i])) {
                if (!words1[i].equals(words2[i]))
                    return false;
            } else if (!dsu.contains(words1[i]) || !dsu.contains(words2[i])) {
                return false;
            } else {
                if (!dsu.findParent(words1[i]).equals(dsu.findParent(words2[i])))
                    return false;
            }
        }
        return true;
    }
    
    class DSU {
        Map<String, String> parent;
        
        public DSU(List<List<String>> pairs) {
            parent = new HashMap<>();
        }
        
        public void union(String s, String t) {
            if (!parent.containsKey(s)) 
                parent.put(s, s);
            if (!parent.containsKey(t))
                parent.put(t, t);
            String sp = findParent(s);
            String tp = findParent(t);
            parent.put(tp, sp);
        }
        
        public String findParent(String s) {
            String sp = parent.get(s);
            if (!s.equals(sp))
                parent.put(s, findParent(sp));
            return parent.get(s);
        }
        
        public boolean contains(String s) {
            return parent.containsKey(s);
        }
    }
}

// method 2:
class Solution {
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        if(words1.length != words2.length) return false;
        Map<String, Set<String>> g = new HashMap<>();
        buildG(pairs, g);
        
        int n= words1.length;
        for(int i=0; i<n; i++) {
            if(words1[i].equals(words2[i])) continue;
            if(!dfs(words1[i], words2[i], g, new HashSet<>()))
                return false;
        }
        return true;
    }
    
    private void buildG(List<List<String>> pairs, Map<String, Set<String>> g) {
        for(List<String> pair : pairs) {
            g.putIfAbsent(pair.get(0), new HashSet<>());
            g.putIfAbsent(pair.get(1), new HashSet<>());
            g.get(pair.get(0)).add(pair.get(1));
            g.get(pair.get(1)).add(pair.get(0));
        }
    }
    
    private boolean dfs(String s1, String s2, Map<String, Set<String>> g, 
                                                Set<String> visited) {
        if(g.get(s1) == null || g.get(s1).size() == 0)
            return false;
        if(g.get(s1).contains(s2)) return true;
        for(String nei : g.get(s1)) {
            if(!visited.add(nei)) continue;
            if(dfs(nei, s2, g, visited))
                return true;
        }
        return false;
    }
}
