class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if(candidates == null || candidates.length == 0) return res;
        Arrays.sort(candidates);
        helper(candidates, res, new ArrayList<>(), 0, target, 0);
        return res;
    }
    
    private void helper(int[] nums, List<List<Integer>> res, List<Integer> tmp, int idx, 
                                                           int target, int cur) {
        if(idx > nums.length || cur > target)
            return;
        
        if(cur == target) {
            res.add(new ArrayList<>(tmp));
            return;
        }
        
        for(int i=idx; i<nums.length; i++) {
            
            tmp.add(nums[i]);
            helper(nums, res, tmp, i+1, target, cur+nums[i]);
            tmp.remove(tmp.size()-1);
            while(i<nums.length-1 &&  nums[i] == nums[i+1])
                i++;
        }
    }
}
