// method 1:
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals == null) return 0;
        List<EndPoint> list = new ArrayList<>();
        
        for(int[] interval : intervals) {
            list.add(new EndPoint(interval[0], false));
            list.add(new EndPoint(interval[1], true));
        }
        
        Collections.sort(list);
        int res = 0, count = 0;
        
        for(EndPoint ep : list) {
            if(!ep.isEnd) count++;
            else count--;
            res = Math.max(res, count);
        }
        
        return res;
    }
    
    class EndPoint implements Comparable<EndPoint> {
        public int val;
        public boolean isEnd;
        
        public EndPoint(int val, boolean isEnd) {
            this.val = val;
            this.isEnd = isEnd;
        }
        
        public int compareTo(EndPoint  ep) {
            if(this.val < ep.val) {
                return -1;
            } else if(this.val > ep.val) {
                return 1;
            } else {
                if(this.isEnd) return -1;
                else return 1;
            }
        }
    }
}


// method 2:
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        for(int i=0; i<intervals.length; i++) {
            starts[i] = intervals[i][0];
            ends[i] = intervals[i][1];
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        int res = 0;
        int end = 0;
        for(int i=0; i<intervals.length; i++) {
            if(starts[i] < ends[end]) {
                res++;
            } else end++;
        }
        return res;
    }
}
