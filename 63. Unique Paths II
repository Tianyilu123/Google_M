class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        int[] dp = new int[col];
        dp[0] = 1;
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(obstacleGrid[i][j] == 1)
                    dp[j] = 0;
                else if(j>0)
                    dp[j] += dp[j-1];
            }
        }
        return dp[col-1];
    }
}

// time : O(row*col)
// space: O(col)


// method 2:
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(obstacleGrid == null || m == 0) return 0;
        int[][] dp = new int[m][n];
        
        for(int i=0; i<m; i++){
            if(obstacleGrid[i][0] == 1) break;
            dp[i][0] = 1;
        }
        for(int i=0; i<n; i++){
            if(obstacleGrid[0][i] == 1) break;
            dp[0][i] =1;
        }
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n;j++){
                if(obstacleGrid[i][j] == 1) continue;
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}
