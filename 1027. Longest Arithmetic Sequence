// method 1:
class Solution {
    public int longestArithSeqLength(int[] A) {
        int n = A.length;
        if(n<2) return n;
        int max = 0;
        HashMap<Integer, Integer>[] map = new HashMap[n];
        
        for(int i=0; i<n; i++) {
            map[i] = new HashMap<>();
            
            for(int j=0; j<i; j++) {
                int diff = A[i] - A[j];
                if(map[j].get(diff) == null) {
                    map[i].put(diff, 2);
                } else {
                    map[i].put(diff, map[j].get(diff)+1);
                }
                
                max = Math.max(max, map[i].get(diff));
            }
        }
        return max;
    }
}

// method 2:
class Solution {
    public int longestArithSeqLength(int[] A) {
        int n = A.length;
        if(n<2) return n;
        int[][] dp = new int[n][n];
        int[] index = new int[20001];
        Arrays.fill(index, -1);
        int res = 2;
        
        for(int i=0; i<n; i++) {
            Arrays.fill(dp[i], 2);
            
            for(int j=i+1; j<n; j++) {
                int prev = A[i] * 2 - A[j];
                if(prev < 0 || index[prev] == -1)
                    continue;
                int idx = index[prev];
                dp[i][j] = dp[idx][i] + 1;
                res = Math.max(res, dp[i][j]);
            }
            
            index[A[i]] = i;
        }
        return res;
    }
}
