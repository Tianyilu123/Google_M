class Solution {
    public int numMatchingSubseq(String S, String[] words) {
        int res = 0, cur, i;
        List<Integer>[] pos = positions(S);
        for(String word : words) {
            for(i=0, cur=0; i<word.length(); i++, cur++) {
                char c = word.charAt(i);
                cur = search(pos[c-'a'], cur);
                if(cur == -1) break;
            }
            if(cur != -1) res++;
        }
        return res;
    }
    
    private int search(List<Integer> ns, int n) {
        if(ns == null) return -1;
        int lo=0, hi=ns.size()-1;
        if(ns.get(lo) >= n)
            return ns.get(lo);
        if(ns.get(hi) < n)
            return -1;
        while(lo < hi) {
            int mid = (lo+hi)/2;
            if(ns.get(mid) == n)
                return ns.get(mid);
            if(ns.get(mid) < n)
                lo = mid+1;
            else
                hi = mid;
        }
        return ns.get(hi);
    }
    
    private List<Integer>[] positions(String s) {
        List<Integer>[] pos = new List[26];
        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if(pos[c-'a'] == null)
                pos[c-'a'] = new ArrayList<>();
            pos[c-'a'].add(i);
        }
        return pos;
    }
}
