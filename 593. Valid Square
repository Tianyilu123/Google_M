class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        long[] lens = {getLen(p1, p2), getLen(p2, p3), getLen(p3, p4), getLen(p4, p1),
                            getLen(p1,p3), getLen(p2,p4)};
        long max = 0, nonMax = 0;
        
        for(long len : lens) {
            max = Math.max(max, len);
        }
        
        int count = 0;
        for(int i=0; i<lens.length; i++) {
            if(lens[i] == max) count++;
            else 
                nonMax = lens[i];
        }
        
        if(count != 2) return false;
        
        for(long len: lens) {
            if(len != max && len != nonMax) return false;
        }
        
        return true;
    }
    
    private long getLen(int[] p1, int[] p2) {
        return (long)Math.pow(p1[0]-p2[0], 2) + (long)Math.pow(p1[1]-p2[1], 2);
    }
}
