// method 1:
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length==0) return res;
        res.add(new ArrayList<Integer>());
        
        for(int n : nums) {
            int size = res.size();
            for(int i=0; i<size; i++) {
                List<Integer> one = new ArrayList<>(res.get(i));
                one.add(n);
                res.add(one);
            }
        }
        return res;
    }
}

// method 2:
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        // Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
}

    private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
        list.add(new ArrayList<>(tempList));
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
