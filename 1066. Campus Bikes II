class Solution {
    public int assignBikes(int[][] workers, int[][] bikes) {
        int lenb = bikes.length;
        int[] dp = new int[1<<lenb];
        return dfs(workers, bikes, 0, 0, dp);
    }
    
    private int dfs(int[][] workers, int[][] bikes, int workerIdx, int stateb, int[] dp) {
        if(workerIdx == workers.length) return 0;
        if(dp[stateb] != 0) return dp[stateb];
        int min = Integer.MAX_VALUE;
        
        for(int i=0; i<bikes.length; i++) {
            if((stateb & (1<<i)) == 0) {   // num | (1<<k): set num's k-th bit as 1 ; num & (1<<k): get num's k-th bit
                min = Math.min(min, dist(workers, bikes, workerIdx, i) + 
                              dfs(workers, bikes, workerIdx+1, stateb | (1<<i), dp));
            }
        }
        dp[stateb] = min;
        return min;
    }
    
    private int dist(int[][] workers, int[][] bikes, int workerIdx, int bikeIdx) {
        return Math.abs(workers[workerIdx][1] - bikes[bikeIdx][1]) + 
            Math.abs(workers[workerIdx][0] - bikes[bikeIdx][0]);
    }
}




// method 2:
class Solution {
    int min = Integer.MAX_VALUE;
    public int assignBikes(int[][] workers, int[][] bikes) {
        int m = bikes.length;
        boolean[] used = new boolean[m];
        dfs(0, workers, bikes, 0, used);
        return min;
    }
    
    private void dfs(int workerIdx, int[][] workers, int[][] bikes, int sum, 
                     boolean[] used)  {
        if(workerIdx == workers.length) {
            min = Math.min(min, sum);
            return ;
        }
        
        if(sum > min) return;
        
        for(int i=0; i<bikes.length; i++) {
            if(!used[i]) {
                used[i] = true;
                dfs(workerIdx+1, workers, bikes, sum+distance(workers[workerIdx], bikes[i]),
                   used);
                used[i] = false;
            }
        }
    }
    
    private int distance(int[] worker, int[] bike) {
        return Math.abs(worker[0]-bike[0]) + Math.abs(worker[1] - bike[1]);
    }
}
