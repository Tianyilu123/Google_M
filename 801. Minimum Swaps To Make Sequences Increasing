// method 1:
class Solution {
    public int minSwap(int[] A, int[] B) {
        int pre_swap = 1, pre_not_swap = 0;
        
        for(int i=1; i<A.length; i++) {
            int cur_swap, cur_not_swap;
            if(A[i]>A[i-1] && A[i]>B[i-1] && B[i] > A[i-1] && B[i] > B[i-1]) {
                cur_not_swap = Math.min(pre_swap, pre_not_swap);
                cur_swap = Math.min(pre_swap, pre_not_swap)+1;
            } else if (A[i]>A[i-1] && B[i]>B[i-1]) {
                cur_not_swap = pre_not_swap;
                cur_swap = pre_swap+1;
            } else {
                cur_not_swap = pre_swap;
                cur_swap = pre_not_swap+1;
            }
            
            pre_swap = cur_swap;
            pre_not_swap = cur_not_swap;
        }
        
        return Math.min(pre_swap, pre_not_swap);
    }
}


// method 2:
class Solution {
    public int minSwap(int[] A, int[] B) {
        int res = Integer.MAX_VALUE;
        dfs(A, B, 1, 0, res);
        return res;
    }
    
    private void(int[] A, int[] B, int i, int cur, int res) {
        if(cur >= res) return;
        if(i == A.size()) {
            res = Math.min(res, cur);
            return;
        }
        
        if(A[i] > A[i-1] && B[i] > B[i-1]) {
            dfs(A, B, i+1, c, res);
        }
        
        if(A[i] > B[i-1] && B[i] > A[i-1]) {
            swap(A[i], B[i]);
            dfs(A,B,i+1, c+1, res);
            swap(A[i], B[i]);
        }
    }
}
