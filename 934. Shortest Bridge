class Solution {
    public int shortestBridge(int[][] A) {
        int row = A.length, col = A[0].length;
        int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        boolean[][] visited = new boolean[row][col];
        Queue<int[]> queue = new LinkedList<>();
        boolean found = false;
        
        for(int i=0; i<row; i++) {
            if(found) break;
            for(int j=0; j<col; j++) {
                if(A[i][j] == 1) {
                    dfs(A, visited, queue, i, j, dirs);
                    found = true;
                    break;
                }
            }
        }
        
        // bfs to expand the island
        int step = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            while(size-- >0) {
                int[] cur = queue.poll();
                for(int[] dir : dirs) {
                    int i = cur[0] + dir[0];
                    int j = cur[1] + dir[1];
                    if(i>=0 && j>=0 && i<row && j<col && !visited[i][j]) {
                        if(A[i][j] == 1) return step;
                        queue.offer(new int[]{i,j});
                        visited[i][j] = true;
                    }
                }
            }
            step++;
        }
        return -1;
    }
    
    private void dfs(int[][] A, boolean[][] visited, Queue<int[]> queue, int i, int j,
                                        int[][] dirs) {
        if(i<0 || j<0 || i>=A.length || j>=A[0].length || visited[i][j] || A[i][j]==0)
            return;
        visited[i][j] = true;
        queue.offer(new int[]{i,j});
        for(int[] dir : dirs) {
            dfs(A, visited, queue, i+dir[0], j+dir[1], dirs);
        }
    }
}
