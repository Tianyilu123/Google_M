// method1:
class Solution {
    public int[][] kClosest(int[][] points, int K) {
    PriorityQueue<int[]> pq = new PriorityQueue<int[]>((p1, p2) -> p2[0] * p2[0] + p2[1] * p2[1] - p1[0] * p1[0] - p1[1] * p1[1]);
    for (int[] p : points) {
        pq.offer(p);
        if (pq.size() > K) {
            pq.poll();
        }
    }
    int[][] res = new int[K][2];
    while (K > 0) {
        res[--K] = pq.poll();
    }
    return res;
}
}

// method2:
class Solution {
    int[][] points;
    public int[][] kClosest(int[][] points, int K) {
        this.points = points;
        sort(0, points.length-1, K);
        return Arrays.copyOfRange(points, 0, K);
    }
    
    private void sort(int i, int j, int K) {
        if(i >= j) return;
        int k = ThreadLocalRandom.current().nextInt(i,j);
        swap(i, j);
        
        int mid = partition(i, j);
        int leftLen = mid-i+1;
        if(K<leftLen) {
            sort(i, mid-1, K);
        }
        else if(K>leftLen) {
            sort(mid+1, j, K-leftLen);
        }
    }
    
    private int partition(int i, int j) {
        int ori = i;
        int pivot = dist(i);
        i++;
        
        while(true) {
            while(i<j && dist(i) < pivot) i++;
            while(i<=j && dist(j) > pivot) j--;
            if(i>=j) break;
            swap(i, j);
        }
        
        swap(ori, j);
        return j;
    }
    
    private int dist(int i) {
        return points[i][0] * points[i][0] + points[i][1] * points[i][1];
    }
    
    public void swap(int idx1, int idx2){
        int tmp1,tmp2;
        tmp1 = points[idx1][0];
        tmp2 = points[idx1][1];
        points[idx1][0] = points[idx2][0];
        points[idx1][1] = points[idx2][1];
        points[idx2][0] = tmp1;
        points[idx2][1] = tmp2;
    }
}
