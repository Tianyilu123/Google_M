// method1:
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        int[][] res = new int[K][2];
        if(points ==  null || points.length == 0 || points[0].length == 0) {
            return res;
        }
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b)-> 
                                b[0]*b[0]+b[1]*b[1]-a[0]*a[0]-a[1]*a[1]);
        for(int[] p:points) {
            pq.offer(p);
            if(pq.size()>K) {
                pq.poll();
            }
        }
        
        while(!pq.isEmpty()) {
            res[K-1] = pq.poll();
            K--;
        }
        
        return res;
    }
}


// method2:
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        int N = points.length;
        int[] dists = new int[N];
        for (int i = 0; i < N; ++i)
            dists[i] = dist(points[i]);

        Arrays.sort(dists);
        int distK = dists[K-1];

        int[][] ans = new int[K][2];
        int t = 0;
        for (int i = 0; i < N; ++i)
            if (dist(points[i]) <= distK)
                ans[t++] = points[i];
        return ans;
    }

    public int dist(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }
}
