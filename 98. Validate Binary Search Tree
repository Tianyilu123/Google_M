class Solution {
    public boolean isValidBST(TreeNode root) {
        Integer[] prev = new Integer[1];
        return helper(root, prev);
    }
    
    private boolean helper(TreeNode root, Integer[] prev) {
        if(root == null) return true;
        if(!helper(root.left, prev)) 
            return false;
        if(prev[0] != null && prev[0] >= root.val)
            return false;
        prev[0] = root.val;
        return helper(root.right, prev);
    }
}


// method 2:
class Solution {
    TreeNode prev = null;
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        return helper(root);
    }
    
    private boolean helper(TreeNode root) {
        if(root == null) return true;
        boolean left = helper(root.left);
        if(prev != null) {
            if(root.val <= prev.val) return false;
        }
        prev = root;
        boolean right = helper(root.right);
        return left && right;
    }
}


// method 3:
class Solution {
    Integer prev = null;
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        
        if(!isValidBST(root.left))
            return false;
        
        if(prev != null) {
            if(prev >= root.val)
                return false;
        }
        prev = root.val;
        
        return isValidBST(root.right);
    }
}

