class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(beginWord == null || beginWord.length() == 0) return 0;
        if(wordList == null || wordList.size() == 0) return 0;
        
        HashSet<String> set = new HashSet<>();
        for(String str : wordList) {
            set.add(str);
        }
        
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int minDis = 1;
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            while(size -- >0) {
                String cur = queue.poll();
                char[] cs = cur.toCharArray();
                for(int i=0; i<cs.length; i++) {
                    char tmp = cs[i];
                    for(char c='a'; c<='z'; c++) {
                        cs[i] = c;
                        String str = String.valueOf(cs);
                        if(c != tmp && set.contains(str)) {
                            if(str.equals(endWord))
                                return minDis+1;
                            queue.offer(str);
                            set.remove(str);
                        }
                    }
                    cs[i] = tmp;
                }
            }
            minDis++;
        }
        return 0;
    }
}
