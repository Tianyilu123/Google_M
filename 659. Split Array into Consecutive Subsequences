// method1:
public boolean isPossible(int[] nums) {
    int pre = Integer.MIN_VALUE;
	int p1 = 0;
	int p2 = 0;
	int p3 = 0;
	
    int cur = 0;
	int cnt = 0;
	int c1 = 0;
	int c2 = 0;
	int c3 = 0;
        
    for (int i = 0; i < nums.length; pre = cur, p1 = c1, p2 = c2, p3 = c3) {
        for (cur = nums[i], cnt = 0; i < nums.length && cur == nums[i]; i++) {
			cnt++;
		}
        
        if (cur != pre + 1) {
            if (p1 != 0 || p2 != 0) {
				return false;
			}
			
            c1 = cnt;
			c2 = 0;
			c3 = 0;
            
        } else {
            if (cnt < p1 + p2) {
				return false;
			}
			
            c1 = Math.max(0, cnt - (p1 + p2 + p3));
            c2 = p1;
            c3 = p2 + Math.min(p3, cnt - (p1 + p2));
        }
    }
    
    return (p1 == 0 && p2 == 0);
}


// method2:
class Solution {
    public boolean isPossible(int[] nums) {
        HashMap<Integer, Integer> freq = new HashMap<>();
        HashMap<Integer, Integer> hypo = new HashMap<>();
        
        for(int num : nums) {
            freq.put(num, freq.getOrDefault(num,0)+1);
        }
        
        for(int num : nums) {
            if(freq.get(num) == 0) continue;
            else if(hypo.getOrDefault(num,0) > 0) {
                hypo.put(num, hypo.get(num)-1);
                hypo.put(num+1, hypo.getOrDefault(num+1,0)+1);
            }
            else if(freq.getOrDefault(num+1,0)>0 && freq.getOrDefault(num+2,0)>0) {
                freq.put(num+1, freq.get(num+1)-1);
                freq.put(num+2, freq.get(num+2)-1);
                hypo.put(num+3, hypo.getOrDefault(num+3,0)+1);
            }
            else 
                return false;
            freq.put(num, freq.get(num)-1);
        }
        return true;
    }
}
