public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        StringBuilder sb = new StringBuilder();
        helper1(root, sb);
        sb.setLength(sb.length()-1);
        return sb.toString();
    }
    
    private void helper1(TreeNode root, StringBuilder sb) {
        if(root == null) return;
        sb.append(root.val).append(",");
        helper1(root.left, sb);
        helper1(root.right, sb);
        return;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.isEmpty()) return null;
        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(",")));
        return helper2(queue, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    private TreeNode helper2(Queue<String> queue, int lower, int upper) {
        if(queue.isEmpty()) return null;
        String s = queue.peek();
        int val = Integer.parseInt(s);
        if(val < lower || val > upper) return null;
        queue.poll();
        TreeNode root = new TreeNode(val);
        root.left = helper2(queue, lower, val);
        root.right = helper2(queue, val, upper);
        return root;
    }
}
