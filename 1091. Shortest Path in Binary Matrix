// method 1:
class Solution {
    private static final int[][] neighbors = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, -1}, {-1, 1}, {-1, -1}, {1, 1}};

    public static int shortestPathBinaryMatrix(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0 || grid.length != grid[0].length) return 0;

        int n = grid.length;
        // early return
        if (grid[0][0] != 0 || grid[n - 1][n - 1] != 0) return -1;

        final Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0, 0});

        int res = 0;
        while (!q.isEmpty()) {
            for (int i = q.size(); i > 0; i--) {
                int[] curr = q.poll();
                // assert curr != null;
                if (curr[0] == n - 1 && curr[1] == n - 1) {
                    // restore(grid);
                    return res + 1;
                }

                for (int k = 0; k < 8; k++) {
                    int x0 = curr[0] + neighbors[k][0];
                    int y0 = curr[1] + neighbors[k][1];

                    if (x0 >= 0 && x0 < n && y0 >= 0 && y0 < n && grid[x0][y0] == 0) {
                        q.add(new int[]{x0, y0});
                        grid[x0][y0] = ~grid[x0][y0];
                    }
                }
            }
            res++;
        }

        // restore(grid);
        return -1;
    }
}

// methdo 2:
class Solution {
    private int dir[][] = new int[][]{{0,1},{0,-1},{1,0},{-1,0},{1,-1},{-1,1},{-1,-1},{1,1}};

    public int shortestPathBinaryMatrix(int[][] grid) {

        int m = grid.length;
        int n = grid[0].length;

        if(grid[0][0]==1 || grid[m-1][n-1]==1) {
            return -1;
        }

        boolean[][] visited = new boolean[m][n];
        visited[0][0] = true;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0});

        int ans=0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for(int i=0;i<size;i++) {
                int[] pop = queue.remove();
                if(pop[0]==m-1 && pop[1]==n-1) {
                    return ans+1;
                }
                for (int k=0;k<8;k++) {
                    int nextX = dir[k][0]+pop[0];
                    int nextY = dir[k][1]+pop[1];

                    if(nextX>=0 && nextX<m && nextY>=0 && nextY<n && !visited[nextX][nextY] && grid[nextX][nextY]==0) {
                        queue.add(new int[]{nextX,nextY});
                        visited[nextX][nextY]=true;
                    }

                }
            }
            ans++;
        }

        return -1;
    }
}
