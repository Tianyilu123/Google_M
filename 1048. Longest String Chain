// method 1:
class Solution {
    public int longestStrChain(String[] words) {
        Arrays.sort(words, new Comparator<String>() {
            public int compare(String a, String b) {
                return a.length()-b.length();
            }
        });
        int[] dp=new int[words.length];
        int res=0;
        for(int i=0;i<words.length;i++) {
            dp[i]=1;
            for(int j=i-1;j>=0;j--) {
                if(words[j].length()<words[i].length()-1) break;
                if(words[j].length()==words[i].length()||!check(words[i], words[j])) continue;
                dp[i]=Math.max(dp[i], dp[j]+1);  
            }
            res=Math.max(res, dp[i]);
        }
        return res;
    }
    
    public boolean check(String a, String b) {
        for(int i=0, j=0;i<a.length()&&j<b.length();i++, j++) {
            if(a.charAt(i)!=b.charAt(j)&&i==j) j--;
            else if(a.charAt(i)!=b.charAt(j)) return false;
        }
        return true;
    }
}



// method 2:

class Solution {
    public int longestStrChain(String[] words) {
        int ans = 0;
        Set<String> set = new HashSet<>();
        Map<String, Integer> map = new HashMap<>();
        for(String word : words) set.add(word);
        for(String word : words) ans = Math.max(ans, helper(map, set, word));
        return ans;
    }
    
    private int helper(Map<String, Integer> map, Set<String> set, String word){
        if(map.containsKey(word)) return map.get(word);
        int cnt = 0;
        for(int i = 0; i < word.length(); i++){
            String next = word.substring(0, i) + word.substring(i+1);
            if(set.contains(next)){
                cnt = Math.max(cnt, helper(map, set, next));
            }
        }
        map.put(word, 1 + cnt);
        return 1 + cnt;
    }
}
