// method 1:
class Solution {
    public List<String> letterCombinations(String digits) {
        LinkedList<String> res = new LinkedList<>();
        if(digits == null || digits.length() == 0) return res;
        String[] mapping = new String[] {"0","1","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        res.add("");
        while(res.peek().length() != digits.length()) {
            String cur = res.remove();
            String map = mapping[digits.charAt(cur.length())-'0'];
            for(char c : map.toCharArray()) {
                res.addLast(cur + c);
            }
        }
        return res;
    }
}

// method2:
class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new LinkedList<>();
        if(digits.length() == 0) return res;
        res.add("");
        
        for(int i=0; i<digits.length(); i++) {
            List<Character> list = get(digits.charAt(i));
            int size = res.size();
            for(int k=0; k<size; k++) {
                String cur = res.get(0);
                res.remove(0);
                for(char ch : list) {
                    res.add(cur + ch);
                }
            }
        }
        return res;
    }
    
    public List<Character> get(char c) {
        List<Character> res = new ArrayList<>();
        switch(c) {
            case '2' : res.add('a'); res.add('b'); res.add('c'); break;
            case '3' : res.add('d'); res.add('e'); res.add('f'); break;
            case '4' : res.add('g'); res.add('h'); res.add('i'); break;
            case '5' : res.add('j'); res.add('k'); res.add('l'); break;
            case '6' : res.add('m'); res.add('n'); res.add('o'); break;
            case '7' : res.add('q'); res.add('p'); res.add('r'); res.add('s'); break;
            case '8' : res.add('t'); res.add('u'); res.add('v'); break;
            case '9' : res.add('w'); res.add('x'); res.add('y'); res.add('z'); break;
        }
        return res;
    }
}
